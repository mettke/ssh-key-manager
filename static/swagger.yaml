openapi: 3.0.0
info:
    title: "SSH Key Authority"
    license:
      name: "MIT"
    version: "0.1.0"
paths:
    /auth/token:
        summary: Request Token for API Authentication
        get:
            tags: 
                - Authentication
                - GET
            summary: Send username and password in exchange for a bearer token
            description: Requires an UserInfo Endpoint on the OpenID Provider side, the direct access permission and the consent screen must be disabled.
            operationId: "getAuthToken"
            responses:
                200:
                    description: Token 
                    text/plain:
                        schema:
                            type: string
                401:
                    $ref: '#/components/responses/UnauthorizedError'
                500:
                    $ref: '#/components/responses/ServerError'
            security:
                - basicAuth: []
    /auth/token/inspect:
        summary: Get details about the token currently in use
        get:
            tags: 
                - Authentication
                - GET
            summary: Get details about the token currently in use
            operationId: "getAuthTokenInspect"
            responses:
                200:
                    description: Token Details 
                    content:
                        application/json:
                            schema:
                                type: object
                                properties: {
                                    authorized: {
                                        type: "boolean"
                                    },
                                    expiration: {
                                        type: "integer",
                                        format: "int64"
                                    },
                                    expiration_hr: {
                                        type: "string"
                                    },
                                    scopes: {
                                        type: "array",
                                        items: {
                                            type: "string"
                                        }
                                    },
                                    username: {
                                        type: "string"
                                    }
                                }
                500:
                    $ref: '#/components/responses/ServerError'
            security:
                - bearerAuth: []
    /api/publickeys:
        summary: Operations on Public Keys
        get:
            tags: 
                - Public Key
                - GET
            summary: Get all public keys visible for the current user
            operationId: "getPublicKeys"
            responses:
                200:
                    description: Public Keys successfully queried
                    content:
                        application/json:
                            schema:
                                type: object
                        text/plain:
                            schema:
                                type: string
                401:
                    $ref: '#/components/responses/UnauthorizedError'
                500:
                    $ref: '#/components/responses/ServerError'
            security:
                - bearerAuth: []
        post:
            tags: 
                - Public Key
                - POST
            summary: Create a new public key
            operationId: "postPublicKeys"
            requestBody:
                description: public ket data
                required: true
                content:
                  application/x-www-form-urlencoded:
                    schema:
                        type: object
                        properties:
                          data:
                            type: string
                          uid:
                            type: string
                        required:
                          - data
            responses:
                201:
                    description: Public Key successfully created
                    content:
                        application/json:
                            schema:
                                type: object
                400:
                    description: Invalid data or uid
                401:
                    $ref: '#/components/responses/UnauthorizedError'
                409:
                    $ref: '#/components/responses/Conflict'
                500:
                    $ref: '#/components/responses/ServerError'
            security:
                - bearerAuth: []
    /api/publickeys/{id}:
        summary: Operations on a single Public Key
        get:
            tags: 
                - Public Key
                - GET
            summary: Get a Public Key by its id
            parameters:
              - in: path
                name: id
                type: string
                required: true
                description: ID of the Public Key
            operationId: "getPublicKeysById"
            responses:
                200:
                    description: Public Key successfully queried
                    content:
                        application/json:
                            schema:
                                type: object
                        text/plain:
                            schema:
                                type: string
                401:
                    $ref: '#/components/responses/UnauthorizedError'
                404:
                    $ref: '#/components/responses/Notfound'
                500:
                    $ref: '#/components/responses/ServerError'
            security:
                - bearerAuth: []
    /api/servers:
        summary: Operations on Servers
        get:
            tags: 
                - Server
                - GET
            summary: Get all servers visible for the current user
            operationId: "getServers"
            responses:
                200:
                    description: Servers successfully queried
                    content:
                        application/json:
                            schema:
                                type: object
                401:
                    $ref: '#/components/responses/UnauthorizedError'
                500:
                    $ref: '#/components/responses/ServerError'
            security:
                - bearerAuth: []
    /api/servers/{id}:
        summary: Operations on a single Server
        get:
            tags: 
                - Server
                - GET
            summary: Get a Server by its id
            parameters:
              - in: path
                name: id
                type: string
                required: true
                description: ID of the Server
            operationId: "getServersById"
            responses:
                200:
                    description: Server successfully queried
                    content:
                        application/json:
                            schema:
                                type: object
                401:
                    $ref: '#/components/responses/UnauthorizedError'
                404:
                    $ref: '#/components/responses/Notfound'
                500:
                    $ref: '#/components/responses/ServerError'
            security:
                - bearerAuth: []
tags:
    - name: Authentication
    - name: Public Key
    - name: Server
    - name: GET
components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
        basicAuth:
            type: http
            scheme: basic
    responses:
        UnauthorizedError:
            description: Access token is missing or invalid
        Notfound:
            description: Object does not exist
        Conflict:
            description: Object already exists
        ServerError:
            description: Server is not able to perform the request
security:
    - bearerAuth: [] 
    - basicAuth: []
